group InvoiceDao;

invoiceFields(prefix) ::= <<
    <prefix>id,
    <prefix>account_id,
    <prefix>invoice_date,
    <prefix>target_date,
    <prefix>currency
>>

get() ::= <<
  SELECT <invoiceFields()>
  FROM invoices
  ORDER BY target_date ASC;
>>

getInvoicesByAccount() ::= <<
  SELECT <invoiceFields()>
  FROM invoices
  WHERE account_id = :accountId
  ORDER BY target_date ASC;
>>

getInvoicesByAccountAfterDate() ::= <<
  SELECT <invoiceFields()>
  FROM invoices
  WHERE account_id = :accountId AND target_date >= :fromDate
  ORDER BY target_date ASC;
>>

getInvoicesBySubscription() ::= <<
  SELECT <invoiceFields("i.")>
  FROM invoices i
  LEFT JOIN invoice_items ii ON i.id = ii.invoice_id
  WHERE ii.subscription_id = :subscriptionId
  GROUP BY <invoiceFields("i.")>;
>>

getInvoicesForPayment() ::= <<
  SELECT i.id
  FROM invoices i
  LEFT JOIN invoice_payment_summary ips ON ips.invoice_id = i.id
  LEFT JOIN invoice_item_summary iis ON iis.invoice_id = i.id
  WHERE ((ips.last_payment_date IS NULL) OR (DATEDIFF(:targetDate, ips.last_payment_date) >= :numberOfDays))
        AND ((ips.total_paid IS NULL) OR (iis.total_amount >= ips.total_paid))
        AND ((iis.total_amount IS NOT NULL) AND (iis.total_amount > 0))
  GROUP BY <invoiceFields("i.")>;
>>

getById() ::= <<
  SELECT <invoiceFields()>
  FROM invoices
  WHERE id = :id;
>>

getAccountBalance() ::= <<
  SELECT SUM(iis.total_amount) AS amount_invoiced, SUM(ips.total_paid) AS amount_paid
  FROM invoices i
  LEFT JOIN invoice_payment_summary ips ON i.id = ips.invoice_id
  LEFT JOIN invoice_item_summary iis ON i.id = iis.invoice_id
  WHERE i.account_id = :accountId
  GROUP BY i.account_id;
>>

create() ::= <<
  INSERT INTO invoices(<invoiceFields()>)
  VALUES (:id, :accountId, :invoiceDate, :targetDate, :currency);
>>

getInvoiceIdByPaymentAttemptId() ::= <<
  SELECT i.id
    FROM invoices i, invoice_payments ip
   WHERE ip.invoice_id = i.id
     AND ip.payment_attempt_id = :paymentAttemptId
>>

update() ::= <<
  UPDATE invoices
  SET account_id = :accountId, invoice_date = :invoiceDate, target_date = :targetDate, currency = :currency
  WHERE id = :id;
>>

getUnpaidInvoicesByAccountId() ::= <<
  SELECT i.id, i.account_id, i.invoice_date, i.target_date, i.currency
  FROM invoices i
  LEFT JOIN invoice_payment_summary ips ON i.id = ips.invoice_id
  LEFT JOIN invoice_item_summary iis ON i.id = iis.invoice_id
  WHERE i.account_id = :accountId AND NOT (i.target_date > :upToDate)
  GROUP BY i.id, i.account_id, i.invoice_date, i.target_date, i.currency
  HAVING (SUM(iis.total_amount) > SUM(ips.total_paid)) OR (SUM(ips.total_paid) IS NULL)
  ORDER BY i.target_date ASC;
>>

test() ::= <<
  SELECT 1
  FROM invoices;
>>
;